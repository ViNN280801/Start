# How to compile and build Trilinos

# Step 1. Clonning Trilinos from github
git clone https://github.com/trilinos/Trilinos

# Step 2. Compiling
mkdir build
cd build

1st attempt
# Command for Windows PowerShell (but prefer Developer Command Prompt)
cmake -G "Visual Studio 17 2022" `
  -DCMAKE_INSTALL_PREFIX="C:/Program Files/Trilinos" `
  -DCMAKE_C_COMPILER="C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostx64/x64/cl.exe" `
  -DCMAKE_CXX_COMPILER="C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostx64/x64/cl.exe" `
  -DTPL_ENABLE_MPI=ON `
  -DMPI_BASE_DIR="C:/Program Files/Microsoft MPI" `
  -DMPI_LIBRARIES="C:/Program Files (x86)/Microsoft SDKs/MPI/Lib/x64/msmpi.lib" `
  -DMPI_INCLUDE_PATH="C:/Program Files (x86)/Microsoft SDKs/MPI/Include" `
  -DMPIEXEC="C:/Program Files/Microsoft MPI/Bin/mpiexec.exe" `
  -DTrilinos_ENABLE_ALL_PACKAGES=ON `
  -DTrilinos_ENABLE_Fortran=OFF `
  -DTrilinos_ENABLE_Epetra=OFF `
  -DTrilinos_ENABLE_EpetraExt=OFF `
  -DTrilinos_ENABLE_Tpetra=ON `
  -DTrilinos_ENABLE_Xpetra=ON `
  -DTrilinos_ENABLE_COMPLEX=ON `
  -DTrilinos_ENABLE_TESTS=OFF `
  -DBUILD_SHARED_LIBS=ON `
  -DTrilinos_ENABLE_OpenMP=OFF `
  -DTrilinos_ENABLE_EXPLICIT_INSTANTIATION=ON `
  -DTPL_BLAS_LIBRARIES="C:/Program Files/OpenBLAS/lib" `
  -DTPL_LAPACK_LIBRARIES="C:/Program Files/OpenBLAS/lib" `
  -DTPL_Netcdf_INCLUDE_DIRS="C:/Program Files/netCDF 4.9.2/include" `
  -DTPL_Netcdf_LIBRARIES="C:/Program Files/netCDF 4.9.2/lib" `
  -DCMAKE_CXX_FLAGS="/utf-8" `
  -DCMAKE_C_FLAGS="/utf-8" `
  ../

2nd attempt
cmake -G "Visual Studio 17 2022" `
      -A x64 `
      -DCMAKE_BUILD_TYPE=Release `
      -DTrilinos_ENABLE_TESTS=OFF `
      -DTrilinos_ENABLE_ALL_PACKAGES=ON `
      -DTrilinos_ENABLE_Epetra=OFF `
      -DTrilinos_ENABLE_EpetraExt=OFF `
      -DTrilinos_ENABLE_Tpetra=ON `
      -DTrilinos_ENABLE_Xpetra=ON `
      -DTPL_BLAS_LIBRARIES="C:/Program Files/OpenBLAS/lib" `
      -DTPL_LAPACK_LIBRARIES="C:/Program Files/OpenBLAS/lib" `
      -DCMAKE_CXX_FLAGS="/utf-8" `
      ..

cmake --build . --config Release
cmake --install . --config Release --prefix "C:\Program Files\Trilinos"



# Step 3.
# Turn on the VS (file `Trilinos.sln` will appear after prev step), tap on the solution and `Build solution` or `Ctrl+Shift+B`

# Example of compiling OpenBLAS dependency:
# Opt. Compile OpenBLAS
# Step 
	1.1) git clone https://github.com/OpenMathLib/OpenBLAS
	1.2) mkdir build
	1.3) cd build
	1.4) cmake -G "Visual Studio 17 2022" ..
	1.5) start OpenBlas.sln (and then compile solution with VS like in **Step 3**)

# Example if you have problems with any lib (for me it was FMT):
# Just the same download FMT from git, compile it, add to the PATH, LIB and INCLUDE, etc.
# Then starting Trilinos.sln again, you need select all the solutions: 
# press RMB -> Properties -> Configuration Properties -> VC++ Directories:
#	1) Include Directories: You need to add fmt, for example: C:\Program Files\fmt\include
# 	2) Library Directories: C:\Program Files\fmt\lib



# 3rd attempt using MSYS2
pacman -Syu
pacman -S mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-cmake mingw-w64-x86_64-msmpi mingw-w64-x86_64-openblas mingw-w64-x86_64-blas mingw-w64-x86_64-netcdf mingw-w64-x86_64-lapack
cd /c/Users/vladislavsemykin/Downloads/Trilinos/Trilinos/build
export PATH=$PATH:/mingw64/bin
cmake -G "Visual Studio 17 2022" \
      -DCMAKE_BUILD_TYPE=Release \
      -DTrilinos_ENABLE_TESTS=OFF \
      -DTrilinos_ENABLE_ALL_PACKAGES=ON \
      -DTPL_ENABLE_MPI=ON \
      -DTrilinos_ENABLE_Epetra=OFF \
      -DTrilinos_ENABLE_EpetraExt=OFF \
      -DTrilinos_ENABLE_Tpetra=ON \
      -DCMAKE_C_COMPILER=gcc \
      -DCMAKE_CXX_COMPILER=g++ \
      -DMPI_EXEC="C:/Program Files/Microsoft MPI/Bin/mpiexec.exe" \
      -DMPI_C_COMPILER="C:/msys64/mingw64/bin/mpicc.exe" \
      -DMPI_CXX_COMPILER="C:/msys64/mingw64/bin/mpicxx.exe" \
      -DCMAKE_C_FLAGS="/std:c17" \
      -DCMAKE_CXX_FLAGS="/std:c++20 /utf-8" \
      -DCMAKE_INCLUDE_PATH="$ENV{INCLUDE}" \
      -DCMAKE_LIBRARY_PATH="\"C:/Program Files/fmt/lib\";\"C:/Program Files (x86)/Microsoft SDKs/MPI/Lib/x64\"" \
      -DCMAKE_EXE_LINKER_FLAGS="/LIBPATH:\"C:/Program Files/fmt/lib\" /LIBPATH:\"C:/Program Files (x86)/Microsoft SDKs/MPI/Lib/x64\"" \
      ..



# Move `Trilinos` dir to the C:/ to shorten the length of paths
cd /c/Trilinos

# Added MPI to the include directories and library directories (a lot of cases when VS22 don't see `mpi.h`)
# Tacho_Lapack_Team.hpp -> replace `__restrict__` with macro `KOKKOS_RESTRICT` (25 occurences)
# Tacho_Blas_Team.hpp -> replace `__restrict__` with macro `KOKKOS_RESTRICT` (65 occurences)
# Tacho_LDL_Eternal.hpp -> replace `__restrict__` with macro `KOKKOS_RESTRICT` (7 occurences)
# Tacho_LU_Eternal.hpp -> replace `__restrict__` with macro `KOKKOS_RESTRICT` (4 occurences), ...
# Just replace within entire solution



