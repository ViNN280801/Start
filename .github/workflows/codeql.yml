# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '31 2 * * 3'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: manual
        - language: python
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - name: Install Dependencies
      if: matrix.build-mode == 'manual'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
        wget \
        build-essential \
        libboost-all-dev \
        libhdf5-dev \
        libtbb-dev \
        libopenmpi-dev \
        libgmp-dev \
        libmpfr-dev \
        nlohmann-json3-dev \
        gmsh \
        libgtest-dev \
        libgmsh-dev \
        libcgal-dev \
        liblapack-dev \
        libblas-dev

    - name: Installing CGAL 6.0.1
      if: matrix.build-mode == 'manual'
      run: | 
        wget -c https://github.com/CGAL/cgal/releases/download/v6.0.1/CGAL-6.0.1.tar.xz && \
        tar -xf CGAL-6.0.1.tar.xz && \
        cd CGAL-6.0.1/ && mkdir -p build && cd build && \
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local .. && \
        sudo make -j$(nproc) install && \
        cd ../.. && \
        rm -rf CGAL-6.0.1/ CGAL-6.0.1.tar.xz
    
    - name: Download Trilinos 16.0.0
      if: matrix.build-mode == 'manual'
      run: |
        wget -c https://github.com/trilinos/Trilinos/archive/refs/tags/trilinos-release-16-0-0.tar.gz && \
        tar -xzf trilinos-release-16-0-0.tar.gz

    - name: Configure Trilinos
      if: matrix.build-mode == 'manual'
      run: |
        cd Trilinos-trilinos-release-16-0-0/ && mkdir -p build && cd build && \
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local/Trilinos \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=mpicc \
          -DCMAKE_CXX_COMPILER=mpicxx \
          -DTPL_ENABLE_MPI=ON \
          -DTPL_ENABLE_HDF5=OFF \
          -DHDF5_PREFER_PARALLEL=ON \
          -DHDF5_LIBRARIES="/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5_hl.so;/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5.so;/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5_cpp.so" \
          -DTrilinos_ENABLE_ALL_PACKAGES=OFF \
          -DTrilinos_ENABLE_OpenMP=ON \
          -DTrilinos_ENABLE_Belos=ON \
          -DTrilinos_ENABLE_Intrepid2=ON \
          -DTrilinos_ENABLE_Kokkos=ON \
          -DTrilinos_ENABLE_KokkosKernels=ON \
          -DTrilinos_ENABLE_MueLu=ON \
          -DTrilinos_ENABLE_Shards=ON \
          -DTrilinos_ENABLE_Teuchos=ON \
          -DTrilinos_ENABLE_Tpetra=ON \
          -DTrilinos_ENABLE_TESTS=OFF \
          ..

    - name: Cache Trilinos Build
      if: matrix.build-mode == 'manual'
      uses: actions/cache@v3
      with:
        path: |
          Trilinos-trilinos-release-16-0-0/build
          /usr/local/Trilinos
        key: ${{ runner.os }}-trilinos-${{ hashFiles('**/Trilinos-trilinos-release-16-0-0/CMakeLists.txt') }}

    - name: Build Trilinos
      if: matrix.build-mode == 'manual' && steps.cache-trilinos.outputs.cache-hit != 'true'
      run: |
        cd Trilinos-trilinos-release-16-0-0/build && \
        sudo make -j$(nproc) install && \
        cd ../.. && \
        rm -rf Trilinos-trilinos-release-16-0-0/ trilinos-release-16-0-0.tar.gz

    - name: Save Trilinos Cache
      if: matrix.build-mode == 'manual' && steps.cache-trilinos.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      with:
        path: |
          Trilinos-trilinos-release-16-0-0/build
          /usr/local/Trilinos
        key: ${{ runner.os }}-trilinos-${{ hashFiles('**/Trilinos-trilinos-release-16-0-0/CMakeLists.txt') }}
    
    - if: matrix.build-mode == 'manual'
      name: Configure Project
      run: |
        mkdir -pv build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DGPU_CUDA_ON=OFF ..

    - if: matrix.build-mode == 'manual'
      name: Build Project
      run: |
        cd build
        make -j$(nproc)

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
